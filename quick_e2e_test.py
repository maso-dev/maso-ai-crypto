#!/usr/bin/env python3
"""
Quick E2E Test - Post Security Fixes Validation
Fast test of core architecture components
"""

import requests
import time

BASE_URL = "http://localhost:8000"

def quick_test():
    print("üß™ QUICK E2E TEST - Post Security Fixes Validation")
    print("=" * 60)

    # Test 1: Core Health (should be instant)
    print("\n1Ô∏è‚É£ Testing Core Health...")
    try:
        response = requests.get(f"{BASE_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ API Health: PASS")
        else:
            print(f"   ‚ùå API Health: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå API Health: ERROR ({str(e)})")

    # Test 2: Admin Health
    try:
        response = requests.get(f"{BASE_URL}/admin/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Admin Health: PASS")
        else:
            print(f"   ‚ùå Admin Health: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Admin Health: ERROR ({str(e)})")

    # Test 3: Brain Health
    try:
        response = requests.get(f"{BASE_URL}/brain/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Brain Health: PASS")
        else:
            print(f"   ‚ùå Brain Health: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Brain Health: ERROR ({str(e)})")

    # Test 4: Cache Status
    print("\n2Ô∏è‚É£ Testing Cache System...")
    try:
        response = requests.get(f"{BASE_URL}/api/cache/status", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Cache Status: PASS")
        else:
            print(f"   ‚ùå Cache Status: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Cache Status: ERROR ({str(e)})")

    # Test 5: External Services
    print("\n3Ô∏è‚É£ Testing External Services...")
    try:
        response = requests.get(f"{BASE_URL}/api/tavily/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Tavily Service: PASS")
        else:
            print(f"   ‚ùå Tavily Service: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Tavily Service: ERROR ({str(e)})")

    try:
        response = requests.get(f"{BASE_URL}/api/livecoinwatch/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ LiveCoinWatch: PASS")
        else:
            print(f"   ‚ùå LiveCoinWatch: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå LiveCoinWatch: ERROR ({str(e)})")

    # Test 6: Dashboard Loading
    print("\n4Ô∏è‚É£ Testing Dashboards...")
    try:
        response = requests.get(f"{BASE_URL}/dashboard", timeout=5)
        if response.status_code == 200 and response.text.startswith('<!DOCTYPE html>'):
            print("   ‚úÖ Main Dashboard: PASS")
        else:
            print(f"   ‚ùå Main Dashboard: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Main Dashboard: ERROR ({str(e)})")

    try:
        response = requests.get(f"{BASE_URL}/brain-dashboard", timeout=5)
        if response.status_code == 200 and response.text.startswith('<!DOCTYPE html>'):
            print("   ‚úÖ Brain Dashboard: PASS")
        else:
            print(f"   ‚ùå Brain Dashboard: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Brain Dashboard: ERROR ({str(e)})")

    # Test 7: API Documentation
    print("\n5Ô∏è‚É£ Testing API Docs...")
    try:
        response = requests.get(f"{BASE_URL}/docs", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ API Documentation: PASS")
        else:
            print(f"   ‚ùå API Documentation: FAIL ({response.status_code})")
    except Exception as e:
        print(f"   ‚ùå API Documentation: ERROR ({str(e)})")

    print("\n" + "=" * 60)
    print("üéØ Quick E2E Test Complete!")
    print("If all tests PASS, your security fixes are working!")

if __name__ == "__main__":
    quick_test()
