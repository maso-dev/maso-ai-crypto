name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Linting and Code Quality
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black bandit safety
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=120
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check --diff .
        
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level high
        
    - name: Check dependencies with safety
      run: |
        safety check --json --output safety-report.json || true
        safety check

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
        
    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}" >> $GITHUB_ENV
        echo "BINANCE_SECRET_KEY=${{ secrets.BINANCE_SECRET_KEY }}" >> $GITHUB_ENV
        echo "NEWSAPI_API_KEY=${{ secrets.NEWSAPI_API_KEY }}" >> $GITHUB_ENV
        echo "LIVECOINWATCH_API_KEY=${{ secrets.LIVECOINWATCH_API_KEY }}" >> $GITHUB_ENV
        echo "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" >> $GITHUB_ENV
        echo "MILVUS_URI=${{ secrets.MILVUS_URI }}" >> $GITHUB_ENV
        echo "MILVUS_TOKEN=${{ secrets.MILVUS_TOKEN }}" >> $GITHUB_ENV
        echo "NEO4J_URI=${{ secrets.NEO4J_URI }}" >> $GITHUB_ENV
        echo "NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}" >> $GITHUB_ENV
        echo "NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}" >> $GITHUB_ENV
        echo "LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}" >> $GITHUB_ENV
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        python -m pytest test_*.py -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # API Endpoint Validation
  api-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}" >> $GITHUB_ENV
        echo "BINANCE_SECRET_KEY=${{ secrets.BINANCE_SECRET_KEY }}" >> $GITHUB_ENV
        echo "NEWSAPI_API_KEY=${{ secrets.NEWSAPI_API_KEY }}" >> $GITHUB_ENV
        echo "LIVECOINWATCH_API_KEY=${{ secrets.LIVECOINWATCH_API_KEY }}" >> $GITHUB_ENV
        echo "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" >> $GITHUB_ENV
        echo "MILVUS_URI=${{ secrets.MILVUS_URI }}" >> $GITHUB_ENV
        echo "MILVUS_TOKEN=${{ secrets.MILVUS_TOKEN }}" >> $GITHUB_ENV
        echo "NEO4J_URI=${{ secrets.NEO4J_URI }}" >> $GITHUB_ENV
        echo "NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}" >> $GITHUB_ENV
        echo "NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}" >> $GITHUB_ENV
        echo "LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}" >> $GITHUB_ENV
        
    - name: Start application
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Test API endpoints
      run: |
        # Health check
        curl -f http://localhost:8000/health || exit 1
        
        # Admin configuration
        curl -f http://localhost:8000/admin_conf || exit 1
        
        # Portfolio endpoint (may fail due to API limits, but should not crash)
        curl -s http://localhost:8000/api/portfolio || echo "Portfolio endpoint test completed"
        
        # News briefing endpoint
        curl -s http://localhost:8000/api/news-briefing || echo "News briefing endpoint test completed"
        
        # Opportunities endpoint
        curl -s http://localhost:8000/api/opportunities || echo "Opportunities endpoint test completed"

  # Build Validation
  build:
    runs-on: ubuntu-latest
    needs: [lint, test, api-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate imports
      run: |
        python -c "import main; print('‚úÖ Main module imports successfully')"
        python -c "from utils import *; print('‚úÖ Utils modules import successfully')"
        python -c "from routers import *; print('‚úÖ Router modules import successfully')"
        
    - name: Check for syntax errors
      run: |
        python -m py_compile main.py
        find . -name "*.py" -exec python -m py_compile {} \;
        echo "‚úÖ All Python files compile successfully"

  # Security Scan
  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Documentation Check
  docs:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation links
      run: |
        # Check if all referenced files exist
        grep -r "\.md" . --include="*.md" | grep -o "[a-zA-Z0-9_/-]*\.md" | sort | uniq | while read file; do
          if [[ ! -f "$file" ]]; then
            echo "‚ùå Missing documentation file: $file"
            exit 1
          fi
        done
        echo "‚úÖ All documentation files exist"
        
    - name: Validate markdown
      run: |
        # Basic markdown validation
        find . -name "*.md" -exec echo "Checking {}" \; -exec head -1 {} \;

  # Deploy to Staging (for develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint, test, api-test, build, security, docs]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: Deploy to Vercel staging, Heroku staging, etc.
        
    - name: Notify deployment
      run: |
        echo "‚úÖ Staging deployment completed successfully"

  # Deploy to Production (for main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint, test, api-test, build, security, docs]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment logic here
        # Example: Deploy to Vercel production, Heroku production, etc.
        
    - name: Create release tag
      run: |
        git tag -a "v$(date +%Y.%m.%d)" -m "Production release $(date +%Y-%m-%d)"
        git push origin --tags
        
    - name: Notify deployment
      run: |
        echo "‚úÖ Production deployment completed successfully"

# Workflow completion notification
  notify:
    runs-on: ubuntu-latest
    needs: [lint, test, api-test, build, security, docs]
    if: always()
    steps:
    - name: Notify workflow completion
      run: |
        if [ "${{ needs.lint.result }}" == "success" ] && \
           [ "${{ needs.test.result }}" == "success" ] && \
           [ "${{ needs.api-test.result }}" == "success" ] && \
           [ "${{ needs.build.result }}" == "success" ] && \
           [ "${{ needs.security.result }}" == "success" ] && \
           [ "${{ needs.docs.result }}" == "success" ]; then
          echo "üéâ All CI/CD checks passed successfully!"
        else
          echo "‚ùå Some CI/CD checks failed. Please review the logs."
          exit 1
        fi 
